import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        System.out.println("Zadanie 1:");
        trojkiPitagorejskie(17);
        System.out.println("Zadanie 2:");
        System.out.println("Istnieja rozwiazania dla:");
        funKwaRozwiazanie(3);
        System.out.println("Zadanie 3:");
        System.out.println("Wspolczynniki dla ktorych pierwiastek z delty jest kwadratem liczby naturalnej:");
        funKwaDelta(10);
        System.out.println("Zadanie 4:");
        liczbyPierwsze(30);
        System.out.println("Zadanie 5:");
        liczbyPodzielne(2, 3);
        System.out.println("Zadanie 6:");
        piramida(4, 1);
        piramida(4, 2);
        System.out.println("Zadanie 7:");
        System.out.println(silnia(5));
        System.out.println("Zadanie 8:");
        System.out.println(silniaPodwojna(5));
        System.out.println("Zadanie 9:");
        System.out.println(silnia(3,5));
        System.out.println("Zadanie 10:");
        System.out.println(dwumianNewtona(7,2));

        System.out.println("Zadanie 11:");
        int n = 7;
        for(int i=0; i<=n; i++){
            System.out.println(ciagFibonacciego(i));
        }
        System.out.println("Zadanie 12.a:");
        System.out.println(sumaNaturalnych(5));
        System.out.println("Zadanie 12.b:");
        System.out.println(sumaParzystych(5));
        System.out.println("Zadanie 12.c:");
        System.out.println(sumaNieparzystych(5));
        System.out.println("Zadanie 12.d:");
        System.out.println(sumaKwaNaturalnych(5));
        System.out.println("Zadanie 12.e:");
        System.out.println(sumaSzeNaturalnych(5));
        System.out.println("Zadanie 12.f:");
        System.out.println(sumaOdwNaturalnych(5));

        System.out.println("Zadanie 13:");
        System.out.println(czyPalindrom("kajak"));
        System.out.println("Zadanie 14:");
        trojkatPascala(4);
        System.out.println("Zadanie 15:");
        System.out.println(czyPalindrom(5335));
        System.out.println("Zadanie 16:");
        System.out.println(czyDoskonala(28));
        System.out.println("Zadanie 17:");
        System.out.println(czyPierwsza(29));
        System.out.println("Zadanie 18:");
        System.out.println(NWD(12, 15));
        System.out.println("Zadanie 19:");
        int [] tablica = wczytajTablice();
        System.out.println("Zadanie 20:");
        podzbiory(tablica);
    }
    public static void trojkiPitagorejskie(int n){
        for (int i = 1; i <= n; i++) {
            for(int j = i; j <= n; j++) {
                for(int k = j; k <= n; k++) {
                    if(i*i+j*j==k*k){
                        System.out.println("Trojka Pitagorejska: "+i+" "+j+" "+k);
                    }
                }
            }
        }
    }
    public static void funKwaRozwiazanie(int n){
        for(int i = 1; i <= n; i++) {
            for(int j = 0; j <= n; j++) {
                for(int k = 0; k <= n; k++) {
                    if(Math.pow(j, 2)-4*i*k>=0){
                        System.out.println("a = "+i+" b = "+j+" c = "+k);
                    }
                }
            }
        }
    }
    public static void funKwaDelta(int n){
        for (int i = 1; i <= n; i++) {
            for(int j = 0; j <= n; j++) {
                for(int k = 0; k <= n; k++) {
                    double delta = Math.pow(j, 2)-4*i*k;
                    if(delta>=0 & Math.sqrt(delta) * Math.sqrt(delta)== Math.sqrt(delta)){
                        System.out.println("a = "+i+" b = "+j+" c = "+k);
                    }
                }
            }
        }
    }
    public static void liczbyPierwsze(int n){
        int f = 1;
        for(int i = 2; i <= n; i++) {
            for(int j = 2; j < i; j++) {
                if(i%j == 0){
                    f = 0;
                    break;
                }
            }
            if(f == 1){
                System.out.println("Liczba pierwsza: "+i);
            }
            f = 1;
        }
    }
    public static void liczbyPodzielne(int m, int n){
        for (int i = (int)Math.pow(10, m-1); i < (int)Math.pow(10, m); i++){
            if(i%n == 0){
                System.out.println("Liczba podzielna przez n: "+i);
            }
        }
    }
    public static void piramida(int n, int wariant){
        String gwiazda = "*";
        String rzad;
        int m = n-1;
        if(wariant == 1){
            for(int i = 1; i <= n; i++){
                rzad = (gwiazda+" ").repeat(i);
                System.out.println(rzad);
            }
        }
        else if(wariant == 2){
            for(int i = 1; i <= n; i++){
                rzad = " ".repeat(m)+(gwiazda+" ").repeat(i);
                m--;
                System.out.println(rzad);
            }
        }
    }
    public static int silnia(int n){
        int wynik = 1;
        for(int i = 1; i <= n; i++){
            wynik *= i;
        }
        return wynik;
    }
    public static int silniaPodwojna(int n){
        int wynik = 1;
        for(int i = n; i > 0; i -= 2){
            wynik *= i;
        }
        return wynik;
    }
    public static int silnia(int m, int n){
        int wynik = 1;
        for(int i = n; i > 0; i -= m){
            wynik *= i;
        }
        return wynik;
    }
    public static int dwumianNewtona(int n, int k){
        int silnia_n = 1;
        for (int i = 1; i <= n; i++) {
            silnia_n *= i;
        }
        int silnia_k = 1;
        for (int i = 1; i <= k; i++) {
            silnia_k *= i;
        }
        int silnia_n_k = 1;
        for (int i = 1; i <= n-k; i++) {
            silnia_n_k *= i;
        }
        int wynik = silnia_n/(silnia_k*silnia_n_k);
        return wynik;
    }
    public static int ciagFibonacciego(int n){
        if(n==0){
            return 0;
        }
        else if(n==1){
            return 1;
        }
        else{
            return ciagFibonacciego(n-1)+ciagFibonacciego(n-2);
        }
    }
    public static int sumaNaturalnych(int n){
        int suma = 0;
        for(int i = 1; i <= n; i++){
            suma += i;
        }
        return suma;
    }
    public static int sumaParzystych(int n){
        int suma = 0;
        for(int i = 2; i <= n; i += 2){
            suma += i;
        }
        return suma;
    }
    public static int sumaNieparzystych(int n){
        int suma = 0;
        for(int i = 1; i <= n; i += 2){
            suma += i;
        }
        return suma;
    }
    public static int sumaKwaNaturalnych(int n){
        int suma = 0;
        int kwadrat;
        for(int i = 1; i <= n; i++){
            kwadrat = i*i;
            suma += kwadrat;
        }
        return suma;
    }
    public static int sumaSzeNaturalnych(int n) {
        int suma = 0;
        int szescian;
        for (int i = 1; i <= n; i++) {
            szescian = i * i * i;
            suma += szescian;
        }
        return suma;
    }
    public static double sumaOdwNaturalnych(int n){
        double suma = 0.0;
        for(int i = 1; i <= n; i++){
            suma += 1.0/i;
        }
        return suma;
    }
    public static boolean czyPalindrom(String wyraz){
        for(int i = 0; i < wyraz.length()/2; i++){
            if(wyraz.charAt(i) != wyraz.charAt(wyraz.length() - i - 1)){
                return false;
            }
        }
        return true;
    }
    public static void trojkatPascala(int n){
        String rzad = " ".repeat(n)+1;
        System.out.println(rzad);
        int wartosc;
        for(int i = 2; i < n+1; i++){
            rzad = " ".repeat(n-i)+1+" ";
            for(int j = 1; j < i+1; j++){
                wartosc = dwumianNewtona(i, j);
                rzad += wartosc+" ";
            }
            System.out.println(rzad);
        }
    }
    public static boolean czyPalindrom(int n){
        int x = n;
        int y = n;
        int zm = 0;
        int j = 0;
        while(y != 0){
            y /= 10;
            j++;
        }
        for(int i = j; i > 0; i--) {
            zm += x % 10 * (Math.pow(10, i-1));
            x /= 10;
        }
        return n == zm;
    }
    public static boolean czyDoskonala(int n) {
        int liczba = 0;
        for (int i = 1; i < n; i++) {
            if (n % i == 0) liczba += i;
        }
        return n == liczba;
    }
    public static boolean czyPierwsza(int n) {
        for (int i = 2; i < n; i++) {
            if (n % i == 0) return false;
        }
        return true;
    }
    public static int NWD(int a, int b){
        while(a != b){
            if(a > b){
                a -= b;
            }
            else{
                b -= a;
            }
        }
        return a;
    }
    public static int[] wczytajTablice(){
        Scanner wpisz = new Scanner(System.in);
        System.out.println("Podaj n:");
        int n = wpisz.nextInt();
        System.out.println("Podaj "+n+" liczb:");
        int [] tablica = new int[n];
        for(int i = 0; i < n; i++){
            tablica[i] = wpisz.nextInt();
        }
        return tablica;
    }
    public static void podzbiory(int[] tab) {
        int n = tab.length;
        int ile = (int) Math.pow(2, n);
        for (int i = 0; i < ile; i++) {
            System.out.println(i+1+": {");
            for (int j = 0; j < n; j++) {
                if ((i & (1 << j)) > 0) {
                    System.out.println(tab[j] + " ");
                }
            }
            System.out.println("}");
        }
    }
}
