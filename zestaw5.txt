//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;
public class Main {
    public static void main(String[] args) {
        ArrayList<Integer> tab1 = new ArrayList<>();
        ArrayList<Integer> tab2 = new ArrayList<>();
        tab1.add(5);
        tab1.add(3);
        tab1.add(1);
        tab1.add(1);
        tab2.add(2);
        tab2.add(10);
        tab2.add(7);
        System.out.println("Zadanie 1:");
        System.out.println("Lista 1: " + tab1);
        System.out.println("Lista 2: " + tab2);
        System.out.println("Lista: " + append(tab1, tab2));
        System.out.println("Zadanie 2:");
        System.out.println("Lista 1: " + tab1);
        System.out.println("Lista 2: " + tab2);
        System.out.println("Lista: " + merge(tab1, tab2));
        System.out.println("Zadanie 3:");
        System.out.println("Lista 1: " + tab1);
        System.out.println("Lista 2: " + tab2);
        System.out.println("Lista: " + mergeSorted(tab1, tab2));
        System.out.println("Zadanie 4:");
        String napis = "kajak";
        System.out.println("String: " + napis);
        ArrayList<String> napis_sort = toArrayList(napis);
        System.out.println("Posortowany string: " + napis_sort);
        int liczba = 1989;
        System.out.println("Liczba: " + liczba);
        ArrayList<Integer> liczba_sort = toArrayList(liczba);
        System.out.println("Posortowana liczba: " + liczba_sort);
        System.out.println("Zadanie 5:");
        System.out.println("checkDigit: " + checkDigit(liczba_sort, 9));
        System.out.println("Zadanie 6:");
        System.out.println("countDigit: " + countDigit(liczba_sort, 9));
        /*
        System.out.println("Zadanie 7:");
        ArrayList<String> tab3 = new ArrayList<>();
        tab3.add("r");
        tab3.add("e");
        tab3.add("p");
        tab3.add("l");
        tab3.add("z");
        System.out.println("Lista stringow: " + tab3);
        System.out.println("Wynik: " + uniqueArrayList(tab3));

         */
        /*
        int[] tablica = generujTablice(8, -10, 10);
        wypiszTablice(tablica, 3, 3);
        System.out.println();
        System.out.println("Ile nieparzystych: "+ileNieparzystych(tablica));
        System.out.println("Ile parzystych: "+ileParzystych(tablica));
        System.out.println("Ile dodatnich: "+ileDodatnich(tablica));
        System.out.println("Ile ujemnych: "+ileUjemnych(tablica));
        System.out.println("Ile zerowych: "+ileZerowych(tablica));
        System.out.println("Ile maxymalnych: "+ileMaxymalnych(tablica));
        System.out.println("Ile minimalnych: "+ileMinimalnych(tablica));
        System.out.println("Ile unikalnych: "+ileUnikalnych(tablica));
        System.out.println("Suma dodatnich: "+sumaDodatnich(tablica));
        System.out.println("Suma ujemnych: "+sumaUjemnych(tablica));
        System.out.println("Suma odwrotnosci: "+sumaOdwrotnosci(tablica));
        System.out.println("Srednia arytmetyczna: "+sredniaArytmetyczna(tablica));
        System.out.println("Srednia geometryczna: "+sredniaGeometryczna(tablica));
        System.out.println("Srednia harmoniczna: "+sredniaHarmoniczna(tablica));
        System.out.println("Funkcja liniowa:");
        wypiszTablice(funkcjaLiniowa(tablica, 5, 8), 3, 3);
        System.out.println();
        System.out.println("Funkcja kwadratowa:");
        wypiszTablice(funkcjaKwadratowa(tablica, 5, 8, 10), 3, 3);
        System.out.println();
        System.out.println("Funkcja wykladnicza:");
        wypiszTablice(funkcjaWykladnicza(tablica, 5), 3, 3);
        System.out.println();
        System.out.println("Funkcja signum:");
        wypiszTablice(funkcjaSignum(tablica), 3, 3);
        System.out.println();
        System.out.println("Najdluzszy ciag dodatnich: "+najdluzszyCiagDodatnich(tablica));
        System.out.println("Najdluzszy ciag ujemnych: "+najdluzszyCiagUjemnych(tablica));
        System.out.println("Odwroca tablica:");
        odwrocTablice(tablica);
        wypiszTablice(tablica, 3, 3);
        System.out.println();
        System.out.println("Odwrocona tablica od indeksu do indeksu:");
        odwrocTablice(tablica, 2, 5);
        wypiszTablice(tablica, 3, 3);

         */
    }
    /*
    public static int[] generujTablice(int n, int minWartosc, int maxWartosc) {
        int[] tablica = new int[n];
        Random r = new Random();
        for(int i = 0; i < n; i++){
            tablica[i] = r.nextInt((maxWartosc - minWartosc) + 1) + minWartosc;
        }
        return tablica;
    }
    public static void wypiszTablice(int []tab, int n, int m){
        int zm = 0;
        int ile = tab.length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(tab[zm] + "  ");
                zm++;
                ile--;
                if (ile == 0) {
                    break;
                }
            }
            if (ile == 0) {
                break;
            }
            System.out.println();
        }
    }
    public static int ileNieparzystych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] % 2 != 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileParzystych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] % 2 == 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileDodatnich(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileUjemnych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] < 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileZerowych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] == 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileMaxymalnych(int[] tab){
        int ile = 0;
        int max = tab[0];
        for(int i = 1; i < tab.length; i++) {
            if(max < tab[i]){
                max = tab[i];
            }
        }
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] == max){
                ile++;
            }
        }
        return ile;
    }
    public static int ileMinimalnych(int[] tab){
        int ile = 0;
        int min = tab[0];
        for(int i = 1; i < tab.length; i++) {
            if(min > tab[i]){
                min = tab[i];
            }
        }
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] == min){
                ile++;
            }
        }
        return ile;
    }
    public static int ileUnikalnych(int[] tab){
        int ile = 0;
        int f;
        for(int i = 0; i < tab.length; i++) {
            f = 1;
            for(int j = 0; j < tab.length; j++) {
                if(tab[i] == tab[j] & i != j){
                    f = 0;
                    break;
                }
            }
            if(f == 1){
                ile++;
            }
        }
        return ile;
    }
    public static int sumaDodatnich(int[] tab){
        int suma = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0){
                suma += tab[i];
            }
        }
        return suma;
    }
    public static int sumaUjemnych(int[] tab){
        int suma = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] < 0){
                suma += tab[i];
            }
        }
        return suma;
    }
    public static double sumaOdwrotnosci(int[] tab){
        double suma = 0.0;
        for(int i = 0; i < tab.length; i++) {
                suma += 1.0/tab[i];
        }
        return suma;
    }
    public static double sredniaArytmetyczna(int[] tab){
        double srednia = 0.0;
        for(int i = 0; i < tab.length; i++) {
                srednia += tab[i];
        }
        srednia /= tab.length;
        return srednia;
    }
    public static double sredniaGeometryczna(int[] tab){
        double srednia = 1.0;
        for(int i = 0; i < tab.length; i++) {
                srednia *= tab[i];
        }
        srednia = Math.pow(srednia, 1.0/tab.length);
        return srednia;
    }
    public static double sredniaHarmoniczna(int[] tab){
        double srednia = 0.0;
        for(int i = 0; i < tab.length; i++) {
                srednia += 1.0/tab[i];
        }
        srednia = tab.length/srednia;
        return srednia;
    }
    public static int[] funkcjaLiniowa(int[] tab, int a, int b){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            wynik[i] = a*tab[i]+b;
        }
        return wynik;
    }
    public static int[] funkcjaKwadratowa(int[] tab, int a, int b, int c){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            wynik[i] = (int)(a*Math.pow(tab[i], 2)+b*tab[i]+c);
        }
        return wynik;
    }
    public static int[] funkcjaWykladnicza(int[] tab, int a){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            wynik[i] = (int)(Math.pow(a, tab[i]));
        }
        return wynik;
    }
    public static int[] funkcjaSignum(int[] tab){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0) wynik[i] = 1;
            else if(tab[i] < 0) wynik[i] = -1;
            else wynik[i] = 0;
        }
        return wynik;
    }
    public static int najdluzszyCiagDodatnich(int[] tab){
        int f = 0;
        int fmax = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0){
                f++;
            }
            else {
                if(f > fmax){
                    fmax = f;
                }
                f = 0;
            }
        }
        return fmax;
    }
    public static int najdluzszyCiagUjemnych(int[] tab){
        int f = 0;
        int fmax = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] < 0){
                f++;
            }
            else {
                if(f > fmax){
                    fmax = f;
                }
                f = 0;
            }
        }
        return fmax;
    }
    public static void odwrocTablice(int[] tab){
        int zm;
        int j = tab.length-1;
        for(int i = 0; i < tab.length/2; i++) {
            zm = tab[i];
            tab[i] = tab[j];
            tab[j] = zm;
            j--;
        }
    }
    public static void odwrocTablice(int[] tab, int indeksStart, int indeksStop){
        int zm;
        int j = indeksStop;
        for(int i = indeksStart; i < indeksStart+indeksStop/2; i++) {
            zm = tab[i];
            tab[i] = tab[j];
            tab[j] = zm;
            j--;
        }
    }
    public static int[] generujZakres(int n, int minWartosc, int maxWartosc){
        int[] tab = new int[n];
        int skok = (maxWartosc - minWartosc)/n;
        System.out.println(skok);
        return tab;
    }
     */
    public static ArrayList<Integer> append(ArrayList<Integer> tab1, ArrayList<Integer> tab2){
        ArrayList<Integer> tab3 = new ArrayList<>();
        tab1.addAll(tab2);
        tab3.addAll(tab1);
        return tab3;
    }
    public static ArrayList<Integer> merge(ArrayList<Integer> tab1, ArrayList<Integer> tab2){
        ArrayList<Integer> tab3 = new ArrayList<>();
        for (int i = 0; i < tab1.size() || i < tab2.size(); i++) {
            if(i < tab1.size()){
                tab3.add(tab1.get(i));
            }
            if(i < tab2.size()){
                tab3.add(tab2.get(i));
            }
        }
        return tab3;
    }
    public static ArrayList<Integer> mergeSorted(ArrayList<Integer> tab1, ArrayList<Integer> tab2){
        Collections.sort(tab1);
        Collections.sort(tab2);
        ArrayList<Integer> tab3 = merge(tab1, tab2);
        return tab3;
    }
    public static ArrayList<String> toArrayList(String napis){
        ArrayList<String> lista = new ArrayList<>();
        for (int i = 0; i < napis.length(); i++) {
            lista.add(napis.charAt(i) + "");
        }
        Collections.sort(lista);
        return lista;
    }
    public static ArrayList<Integer> toArrayList(int liczba){
        ArrayList<Integer> lista = new ArrayList<>();
        int zm;
        while (liczba > 0) {
            zm = liczba % 10;
            lista.add(zm);
            liczba /= 10;
        }
        Collections.sort(lista);
        return lista;
    }
    /*
    public static Boolean checkChar(ArrayList<String> tab, char znak){
        for (int i = 0; i < tab.size(); i++) {
            if(tab.get(i) == znak){
                return true;
            }
        }
        return false;
    }

     */
    public static Boolean checkDigit(ArrayList<Integer> tab, int cyfra){
        for (int i = 0; i < tab.size(); i++) {
            if(tab.get(i) == cyfra){
                return true;
            }
        }
        return false;
    }
    public static int countDigit(ArrayList<Integer> tab, int cyfra){
        int ile = 0;
        for (int i = 0; i < tab.size(); i++) {
            if(tab.get(i) == cyfra){
                ile++;
            }
        }
        return ile;
    }
    /*
    public static ArrayList<ArrayList<String>> uniqueArrayList(ArrayList<String> tab){
        ArrayList<ArrayList<String>> lista = new ArrayList<ArrayList<String>>();
        lista.add(new ArrayList<String>());
        for (int i = 0; i < tab.size(); i++) {
            lista.get(i).add(tab.get(i));
            lista.get(i).add("0");
        }
        return lista;
    }

     */
}