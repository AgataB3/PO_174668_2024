import java.util.Random;
public class Main {
    public static void main(String[] args) {
        int[] tablica = generujTablice(8, -10, 10);
        wypiszTablice(tablica, 3, 3);
        System.out.println();
        System.out.println("Ile nieparzystych: "+ileNieparzystych(tablica));
        System.out.println("Ile parzystych: "+ileParzystych(tablica));
        System.out.println("Ile dodatnich: "+ileDodatnich(tablica));
        System.out.println("Ile ujemnych: "+ileUjemnych(tablica));
        System.out.println("Ile zerowych: "+ileZerowych(tablica));
        System.out.println("Ile maxymalnych: "+ileMaxymalnych(tablica));
        System.out.println("Ile minimalnych: "+ileMinimalnych(tablica));
        System.out.println("Ile unikalnych: "+ileUnikalnych(tablica));
        System.out.println("Suma dodatnich: "+sumaDodatnich(tablica));
        System.out.println("Suma ujemnych: "+sumaUjemnych(tablica));
        System.out.println("Suma odwrotnosci: "+sumaOdwrotnosci(tablica));
        System.out.println("Srednia arytmetyczna: "+sredniaArytmetyczna(tablica));
        System.out.println("Srednia geometryczna: "+sredniaGeometryczna(tablica));
        System.out.println("Srednia harmoniczna: "+sredniaHarmoniczna(tablica));
        System.out.println("Funkcja liniowa:");
        wypiszTablice(funkcjaLiniowa(tablica, 5, 8), 3, 3);
        System.out.println();
        System.out.println("Funkcja kwadratowa:");
        wypiszTablice(funkcjaKwadratowa(tablica, 5, 8, 10), 3, 3);
        System.out.println();
        System.out.println("Funkcja wykladnicza:");
        wypiszTablice(funkcjaWykladnicza(tablica, 5), 3, 3);
        System.out.println();
        System.out.println("Funkcja signum:");
        wypiszTablice(funkcjaSignum(tablica), 3, 3);
        System.out.println();
        System.out.println("Najdluzszy ciag dodatnich: "+najdluzszyCiagDodatnich(tablica));
        System.out.println("Najdluzszy ciag ujemnych: "+najdluzszyCiagUjemnych(tablica));
        System.out.println("Odwrocona tablica:");
        int[] odwrocona = odwrocTablice(tablica);
        wypiszTablice(odwrocona, 3, 3);
        System.out.println();
        System.out.println("Odwrocona tablica od indeksu do indeksu:");
        int[] odwrocona_indeks = odwrocTablice(tablica, 2, 5);
        wypiszTablice(odwrocona_indeks, 3, 3);
        System.out.println();
        System.out.println("Generuj zakres:");
        int[] tab_zakres = generujZakres(4,2, 10);
        wypiszTablice(tab_zakres, 4, 1);
    }
    public static int[] generujTablice(int n, int minWartosc, int maxWartosc) {
        int[] tablica = new int[n];
        Random r = new Random();
        for(int i = 0; i < n; i++){
            tablica[i] = r.nextInt((maxWartosc - minWartosc) + 1) + minWartosc;
        }
        return tablica;
    }
    public static void wypiszTablice(int []tab, int n, int m){
        int zm = 0;
        int ile = tab.length;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(tab[zm] + "  ");
                zm++;
                ile--;
                if (ile == 0) {
                    break;
                }
            }
            if (ile == 0) {
                break;
            }
            System.out.println();
        }
    }
    public static int ileNieparzystych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] % 2 != 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileParzystych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] % 2 == 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileDodatnich(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileUjemnych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] < 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileZerowych(int[] tab){
        int ile = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] == 0){
                ile++;
            }
        }
        return ile;
    }
    public static int ileMaxymalnych(int[] tab){
        int ile = 0;
        int max = tab[0];
        for(int i = 1; i < tab.length; i++) {
            if(max < tab[i]){
                max = tab[i];
            }
        }
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] == max){
                ile++;
            }
        }
        return ile;
    }
    public static int ileMinimalnych(int[] tab){
        int ile = 0;
        int min = tab[0];
        for(int i = 1; i < tab.length; i++) {
            if(min > tab[i]){
                min = tab[i];
            }
        }
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] == min){
                ile++;
            }
        }
        return ile;
    }
    public static int ileUnikalnych(int[] tab){
        int ile = 0;
        int f;
        for(int i = 0; i < tab.length; i++) {
            f = 1;
            for(int j = 0; j < tab.length; j++) {
                if(tab[i] == tab[j] & i != j){
                    f = 0;
                    break;
                }
            }
            if(f == 1){
                ile++;
            }
        }
        return ile;
    }
    public static int sumaDodatnich(int[] tab){
        int suma = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0){
                suma += tab[i];
            }
        }
        return suma;
    }
    public static int sumaUjemnych(int[] tab){
        int suma = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] < 0){
                suma += tab[i];
            }
        }
        return suma;
    }
    public static double sumaOdwrotnosci(int[] tab){
        double suma = 0.0;
        for(int i = 0; i < tab.length; i++) {
            suma += 1.0/tab[i];
        }
        return suma;
    }
    public static double sredniaArytmetyczna(int[] tab){
        double srednia = 0.0;
        for(int i = 0; i < tab.length; i++) {
            srednia += tab[i];
        }
        srednia /= tab.length;
        return srednia;
    }
    public static double sredniaGeometryczna(int[] tab){
        double srednia = 1.0;
        for(int i = 0; i < tab.length; i++) {
            srednia *= tab[i];
        }
        srednia = Math.pow(srednia, 1.0/tab.length);
        return srednia;
    }
    public static double sredniaHarmoniczna(int[] tab){
        double srednia = 0.0;
        for(int i = 0; i < tab.length; i++) {
            srednia += 1.0/tab[i];
        }
        srednia = tab.length/srednia;
        return srednia;
    }
    public static int[] funkcjaLiniowa(int[] tab, int a, int b){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            wynik[i] = a*tab[i]+b;
        }
        return wynik;
    }
    public static int[] funkcjaKwadratowa(int[] tab, int a, int b, int c){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            wynik[i] = (int)(a*Math.pow(tab[i], 2)+b*tab[i]+c);
        }
        return wynik;
    }
    public static int[] funkcjaWykladnicza(int[] tab, int a){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            wynik[i] = (int)(Math.pow(a, tab[i]));
        }
        return wynik;
    }
    public static int[] funkcjaSignum(int[] tab){
        int []wynik = new int[tab.length];
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0) wynik[i] = 1;
            else if(tab[i] < 0) wynik[i] = -1;
            else wynik[i] = 0;
        }
        return wynik;
    }
    public static int najdluzszyCiagDodatnich(int[] tab){
        int f = 0;
        int fmax = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] > 0){
                f++;
            }
            else {
                if(f > fmax){
                    fmax = f;
                }
                f = 0;
            }
        }
        if(f > fmax){
            fmax = f;
        }
        return fmax;
    }
    public static int najdluzszyCiagUjemnych(int[] tab){
        int f = 0;
        int fmax = 0;
        for(int i = 0; i < tab.length; i++) {
            if(tab[i] < 0){
                f++;
            }
            else {
                if(f > fmax){
                    fmax = f;
                }
                f = 0;
            }
        }
        if(f > fmax){
            fmax = f;
        }
        return fmax;
    }
    public static int[] odwrocTablice(int[] tab){
        int[] odwrocona = new int[tab.length];
        int j = tab.length-1;
        for(int i = 0; i < tab.length/2; i++) {
            odwrocona[i] = tab[j];
            odwrocona[j] = tab[i];
            j--;
        }
        return odwrocona;
    }
    public static int[] odwrocTablice(int[] tab, int indeksStart, int indeksStop){
        int[] odwrocona = tab;
        int zm;
        int j = indeksStop;
        for(int i = indeksStart; i < indeksStart+indeksStop/2; i++) {
            zm = tab[i];
            odwrocona[i] = tab[j];
            odwrocona[j] = zm;
            j--;
        }
        return odwrocona;
    }
    public static int[] generujZakres(int n, int minWartosc, int maxWartosc){
        int[] tab = new int[n];
        double skok = (maxWartosc - minWartosc) / (n - 1.0);
        for (int i = 0; i < n; i++){
            tab[i] = (int)Math.round(minWartosc + i * skok);
        }
        return tab;
    }
}